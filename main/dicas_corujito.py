import pandas as pd
import logging

logger = logging.getLogger(__name__)


def analisar_qualidade_dados(df):
    """Analisa a qualidade dos dados e retorna um relat√≥rio estruturado."""
    if df is None or df.empty:
        return None
    
    analise = {
        "total_linhas": len(df),
        "total_colunas": len(df.columns),
        "duplicatas": df.duplicated().sum(),
        "campos_nulos": df.isnull().sum().to_dict(),
        "problemas": [],
        "avisos": [],
        "dicas_fiscais": [],
        "explicacoes_null": []
    }
    
    if len(df) == 0:
        analise["problemas"].append("Nenhuma linha de dados")
    
    if df.duplicated().sum() > 0:
        pct = (df.duplicated().sum() / len(df)) * 100
        analise["problemas"].append(f"‚ö†Ô∏è {df.duplicated().sum()} linhas duplicadas ({pct:.1f}%)")
    
    # Linhas completamente vazias (NULL ou strings vazias)
    def linha_vazia(row):
        """Verifica se uma linha est√° vazia (None, NaN ou string vazia)."""
        return all(pd.isna(v) or (isinstance(v, str) and v.strip() == '') for v in row)
    
    linhas_vazias_mask = df.apply(linha_vazia, axis=1)
    linhas_vazias = linhas_vazias_mask.sum()
    
    logger.info(f"DEBUG: Linhas vazias: {linhas_vazias}")
    
    if linhas_vazias > 0:
        indices = df[linhas_vazias_mask].index.tolist()
        analise["explicacoes_null"].append(
            f"\nüìã **{linhas_vazias} linha(s) completamente vazia(s)** (√≠ndices: {indices})\n"
            f"   ‚Ä¢ Ocorre ao carregar XMLs de diferentes formatos (NFe + NFSe)\n"
            f"   ‚Ä¢ Cada tipo tem campos espec√≠ficos que n√£o existem no outro\n"
            f"   ‚Ä¢ Exemplo: NFe tem 'ide_*', 'emit_*' / NFSe tem 'prestador_*', 'nfse_*'\n"
            f"   ‚Ä¢ ‚úÖ NORMAL ao consolidar diferentes tipos de notas fiscais\n"
        )
    
    # Detecta tipo de documento
    has_nfse = any('nfse' in c.lower() or 'prestador' in c.lower() for c in df.columns)
    has_nfe = any('ide_' in c.lower() or 'emit_' in c.lower() for c in df.columns)
    
    if has_nfse and has_nfe:
        tipo_doc = 'MISTO (NFe + NFSe)'
    elif has_nfse:
        tipo_doc = 'NFSe'
    elif has_nfe:
        tipo_doc = 'NFe'
    else:
        tipo_doc = None
    
    logger.info(f"DEBUG: Tipo: {tipo_doc}")
    
    colunas_com_nulos = df.columns[df.isnull().any()].tolist()
    logger.info(f"DEBUG: {len(colunas_com_nulos)} colunas com null")
    
    if colunas_com_nulos and tipo_doc:
        analise["explicacoes_null"].append(f"\nüí° **EXPLICA√á√ÉO CAMPOS VAZIOS ({tipo_doc}):**\n")
        
        explicacoes = {
            'MISTO (NFe + NFSe)': {
                'prestador_': '‚úì "prestador_*" vazio: pertence s√≥ a NFSe',
                'ide_': '‚úì "ide_*" vazio: pertence s√≥ a NFe',
                'emit_': '‚úì "emit_*" vazio: pertence s√≥ a NFe',
                'dest_': '‚úì "dest_*" vazio: pertence s√≥ a NFe',
                'tomador_': '‚úì "tomador_*" vazio: pertence s√≥ a NFSe',
                'nfse_': '‚úì "nfse_*" vazio: pertence s√≥ a NFSe',
                'icms': '‚úì ICMS vazio em NFSe: servi√ßo n√£o paga ICMS',
                'cfop': '‚úì CFOP vazio em NFSe: s√≥ para mercadorias',
                'cst': '‚úì CST vazio em NFSe: espec√≠fico de ICMS',
                'total_': '‚úì "total_*" vazio em NFSe: estrutura de NFe',
            },
            'NFSe': {
                'ide_': '‚úì "ide_*" vazio: estrutura exclusiva de NFe',
                'emit_': '‚úì "emit_*" vazio: NFSe usa "prestador_*"',
                'dest_': '‚úì "dest_*" vazio: NFSe usa "tomador_*"',
                'icms': '‚úì ICMS vazio: servi√ßos n√£o pagam ICMS',
                'cfop': '‚úì CFOP vazio: s√≥ para circula√ß√£o de mercadorias',
            },
            'NFe': {
                'nfse_': '‚úì "nfse_*" vazio: estrutura exclusiva de NFSe',
                'prestador_': '‚úì "prestador_*" vazio: NFe usa "emit_*"',
                'tomador_': '‚úì "tomador_*" vazio: NFe usa "dest_*"',
                'iss': '‚úì ISS vazio: produtos pagam ICMS, n√£o ISS',
            }
        }
        
        for col in colunas_com_nulos[:20]:
            count = df[col].isnull().sum()
            pct = (count / len(df)) * 100
            
            if tipo_doc in explicacoes:
                for padrao, exp in explicacoes[tipo_doc].items():
                    if padrao.lower() in col.lower():
                        analise["explicacoes_null"].append(f"   ‚Ä¢ {col} ({count}, {pct:.0f}%): {exp}")
                        break
    
    # Resumo
    nulos_totais = df.isnull().sum().sum()
    if nulos_totais > 0:
        analise["avisos"].append(f"‚ÑπÔ∏è Total: {nulos_totais} campos vazios - veja explica√ß√£o abaixo")
    
    # Valida√ß√µes fiscais BRASIL 2025
    for col in df.columns:
        if 'cfop' in col.lower():
            try:
                cfops = pd.to_numeric(df[col], errors='coerce').dropna()
                if len(cfops) > 0:
                    ext = [c for c in cfops.unique() if str(int(c)).startswith('6')]
                    if ext:
                        analise["dicas_fiscais"].append(f"üì¶ **CFOP 6xxx**: Opera√ß√£o interestadual detectada")
            except:
                pass
        
        if 'cst' in col.lower():
            try:
                csts = df[col].dropna().unique()
                if any(str(c) in ['40','41'] for c in csts):
                    analise["dicas_fiscais"].append(f"üÜì **CST 40/41**: Opera√ß√£o n√£o tributada")
            except:
                pass
        
        if 'issretido' in col.lower():
            try:
                retidos = df[col].dropna().unique()
                if '2' in [str(r) for r in retidos]:
                    analise["dicas_fiscais"].append(f"üí∞ **ISS Retido**: Reten√ß√£o na fonte detectada")
            except:
                pass
    
    # Reforma Tribut√°ria 2026
    if has_nfe:
        analise["dicas_fiscais"].append(
            f"üîî **Reforma Tribut√°ria 2026**: Campos IBS, CBS e IS ser√£o obrigat√≥rios a partir de janeiro/2026"
        )
    
    logger.info(f"DEBUG: {len(analise['explicacoes_null'])} explica√ß√µes geradas")
    return analise


def formatar_relatorio_qualidade(analise):
    """Formata a an√°lise em texto leg√≠vel."""
    if not analise:
        return ""
    
    logger.info(f"DEBUG formatar: {len(analise.get('explicacoes_null',[]))} explica√ß√µes")
    
    relatorio = f"""
üìä AN√ÅLISE DE QUALIDADE DOS DADOS
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
Total: {analise['total_linhas']} linhas | {analise['total_colunas']} colunas
Duplicatas: {analise['duplicatas']} linhas
Campos vazios: {sum(1 for v in analise['campos_nulos'].values() if v > 0)} colunas afetadas


"""
    
    if analise["avisos"]:
        relatorio += "‚ö†Ô∏è AVISOS:\n"
        for aviso in analise["avisos"]:
            relatorio += f"  {aviso}\n"
        relatorio += "\n"
    
    if analise.get("explicacoes_null"):
        logger.info("DEBUG: Adicionando explica√ß√µes")
        for exp in analise["explicacoes_null"]:
            relatorio += f"{exp}\n"
        relatorio += "\n"
    
    return relatorio


def gerar_dica_corujito_inteligente(df, contexto_empresa="", historico=None):
    """An√°lise fiscal completa com valida√ß√µes autom√°ticas + LLM."""
    if df is None or df.empty:
        return "‚ö†Ô∏è Nenhum dado fornecido."
    
    logger.info("DEBUG: Iniciando Corujito")
    
    analise_qualidade = analisar_qualidade_dados(df)
    relatorio = formatar_relatorio_qualidade(analise_qualidade)
    
    if analise_qualidade["problemas"]:
        return relatorio + "\n‚ö†Ô∏è Resolva os problemas acima."
    
    from llm_utils import gerar_resposta_llm
    
    colunas = ", ".join(df.columns.tolist()[:30])
    amostra = df.head(3).to_dict(orient="records")
    
    insights = "\n".join(analise_qualidade["dicas_fiscais"]) if analise_qualidade["dicas_fiscais"] else "Nenhum."
    
    prompt = f"""
Especialista fiscal brasileiro com conhecimento profundo sobre NFe, NFSe, ICMS, ISS e legisla√ß√£o 2025-2026.

DADOS: {len(df)} registros
Colunas: {colunas}

Amostra: {str(amostra)[:1200]}

INSIGHTS DETECTADOS: {insights}

Gere an√°lise fiscal COMPLEMENTAR (m√°ximo 3 pontos):
1. Identifique padr√µes ou anomalias fiscais n√£o detectados automaticamente
2. Sugira a√ß√µes preventivas ou corretivas espec√≠ficas
3. Destaque oportunidades de economia tribut√°ria ou compliance

Seja objetivo, t√©cnico e cite valores/campos espec√≠ficos.
"""
    
    try:
        resposta_llm = gerar_resposta_llm(pergunta=prompt, df=df, contexto_pdf=None, historico=historico)
        
        if analise_qualidade["dicas_fiscais"]:
            resultado = relatorio + "\nüìå INSIGHTS FISCAIS:\n"
            for i, dica in enumerate(analise_qualidade["dicas_fiscais"], 1):
                resultado += f"{i}. {dica}\n"
            resultado += f"\nüß† AN√ÅLISE INTELIGENTE (LLM):\n{resposta_llm or 'Indispon√≠vel'}"
        else:
            resultado = relatorio + f"\nüß† AN√ÅLISE INTELIGENTE (LLM):\n{resposta_llm or 'Indispon√≠vel'}"
        
        return resultado
    except Exception as e:
        logger.error(f"Erro LLM: {e}")
        return relatorio + "\n‚ö†Ô∏è An√°lise LLM indispon√≠vel."


def gerar_dica_rapida(df):
    """Vers√£o r√°pida sem LLM."""
    analise = analisar_qualidade_dados(df)
    return formatar_relatorio_qualidade(analise)
