# main/interface.py - Vers√£o com Dica Inteligente Integrada

import streamlit as st
import time
from io import BytesIO
import os
from datetime import datetime


# üé® Estilo global da p√°gina
def aplicar_estilo():
    st.markdown(
        """
        <style>
            .stApp {
                background-color: #0D1B2A !important;
            }
            h1, h2, h3, h4, h5, h6 {
                color: #FFD700 !important;
            }
            p, span, div, label, .stTextInput, .stTextArea, .stSelectbox, .stDownloadButton, .stButton {
                color: #222 !important;
            }
            /* Corrige cor do texto dentro de caixas de input */
            .stTextInput input, .stTextArea textarea {
                color: #222 !important;
                background: #fff !important;
            }
        </style>
        """,
        unsafe_allow_html=True
    )


# üñºÔ∏è Logo do ChatFiscal (fixo no topo)
def exibir_logo():
    with st.container():
        st.markdown("<div style='text-align: center;'>", unsafe_allow_html=True)
        if os.path.exists("assets/logo_chatfiscal.png"):
            st.image("assets/logo_chatfiscal.png", width=260)
        st.markdown("</div>", unsafe_allow_html=True)


# üí¨ Boas-vindas como popup (toast)
def boas_vindas():
    if "boas_vindas_exibida" not in st.session_state:
        st.toast("üëã Bem-vindo(a) ao ChatFiscal! Seu parceiro inteligente para an√°lise tribut√°ria.", icon="üíº")
        st.session_state["boas_vindas_exibida"] = True


# üì¢ Introdu√ß√£o institucional (exibe uma vez)
def introducao_chatfiscal():
    if "introducao_exibida" not in st.session_state:
        st.markdown(
            """
            <div style='text-align: center; margin-top: 10px; margin-bottom: 20px;'>
                <p style='color: #FFD700; font-size: 18px; font-weight: 500;'>
                    O <strong>ChatFiscal</strong> √© mais que um assistente tribut√°rio ‚Äî √© uma intelig√™ncia fiscal que transforma dados em decis√µes.  
                    Ele interpreta arquivos complexos, identifica inconsist√™ncias, responde d√∫vidas sobre ICMS, CFOP, CST e muito mais.  
                    Tudo isso com agilidade, precis√£o e uma linguagem que voc√™ entende.
                </p>
            </div>
            """,
            unsafe_allow_html=True
        )
        st.session_state["introducao_exibida"] = True


# ü¶â Dica do Corujito com VERS√ÉO INTELIGENTE (anima√ß√£o + download)
def exibir_dica_corujito(dica):
    """
    Exibe a dica do Corujito com anima√ß√£o de digita√ß√£o e bot√£o de download.
    
    Args:
        dica (str): Texto da dica (pode vir de gerar_dica_corujito_inteligente)
    """
    st.markdown("<div style='margin-top: 20px;'>", unsafe_allow_html=True)
    
    col1, col2 = st.columns([1, 10])
    
    with col1:
        # Avatar do Corujito
        if os.path.exists("assets/mascote_corujito.png"):
            st.image("assets/mascote_corujito.png", width=80)
        else:
            st.markdown("ü¶â", unsafe_allow_html=True)
    
    with col2:
        # Container para anima√ß√£o de digita√ß√£o
        container = st.empty()
        texto = ""
        
        # Anima√ß√£o de digita√ß√£o (mais r√°pida para textos longos)
        velocidade = 0.01 if len(dica) > 500 else 0.03
        
        for letra in dica:
            texto += letra
            container.markdown(
                f"""
                <div style='background-color: #0D1B2A; border: 2px solid #FFD700; 
                            padding: 12px; border-radius: 10px; box-shadow: 0 0 10px rgba(255, 215, 0, 0.3);'>
                    <p style='color: #FFD700; font-size: 16px; font-weight: bold; margin-bottom: 8px;'>
                        üí° Dica do Corujito Fiscal:
                    </p>
                    <p style='color: #FFF; font-size: 15px; font-family: monospace; 
                              line-height: 1.6; white-space: pre-wrap;'>{texto}</p>
                </div>
                """,
                unsafe_allow_html=True
            )
            time.sleep(velocidade)
    
    st.markdown("</div>", unsafe_allow_html=True)
    
    # Bot√µes de a√ß√£o
    col_download, col_expandir = st.columns([1, 1])
    
    with col_download:
        # Bot√£o de download da dica como .txt
        buffer = BytesIO()
        buffer.write(dica.encode("utf-8"))
        buffer.seek(0)
        
        st.download_button(
            label="üì• Baixar dica (.txt)",
            data=buffer,
            file_name=f"dica_corujito_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
            mime="text/plain",
            use_container_width=True
        )
    
    with col_expandir:
        # Bot√£o para exibir vers√£o expandida (sem anima√ß√£o)
        if st.button("üìã Ver texto completo", use_container_width=True):
            with st.expander("üìú Texto Completo da Dica", expanded=True):
                st.markdown(f"``````")
    
    st.markdown("<div style='margin-bottom: 30px;'></div>", unsafe_allow_html=True)


# ü¶â Vers√£o SEM anima√ß√£o (para textos muito longos ou r√°pida exibi√ß√£o)
def exibir_dica_corujito_rapida(dica):
    """
    Vers√£o sem anima√ß√£o para exibi√ß√£o instant√¢nea.
    √ötil quando a dica √© muito longa ou quando a anima√ß√£o n√£o √© desejada.
    """
    st.markdown("<div style='margin-top: 20px;'>", unsafe_allow_html=True)
    
    col1, col2 = st.columns([1, 10])
    
    with col1:
        if os.path.exists("assets/mascote_corujito.png"):
            st.image("assets/mascote_corujito.png", width=80)
        else:
            st.markdown("ü¶â", unsafe_allow_html=True)
    
    with col2:
        st.markdown(
            f"""
            <div style='background-color: #0D1B2A; border: 2px solid #FFD700; 
                        padding: 12px; border-radius: 10px; box-shadow: 0 0 10px rgba(255, 215, 0, 0.3);'>
                <p style='color: #FFD700; font-size: 16px; font-weight: bold; margin-bottom: 8px;'>
                    üí° Dica do Corujito Fiscal:
                </p>
                <p style='color: #FFF; font-size: 15px; font-family: monospace; 
                          line-height: 1.6; white-space: pre-wrap;'>{dica}</p>
            </div>
            """,
            unsafe_allow_html=True
        )
    
    st.markdown("</div>", unsafe_allow_html=True)
    
    # Bot√£o de download
    buffer = BytesIO()
    buffer.write(dica.encode("utf-8"))
    buffer.seek(0)
    
    st.download_button(
        label="üì• Baixar dica (.txt)",
        data=buffer,
        file_name=f"dica_corujito_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
        mime="text/plain"
    )
    
    st.markdown("<div style='margin-bottom: 30px;'></div>", unsafe_allow_html=True)


# üß† Resposta com avatar do agente fiscal
def exibir_resposta_agente(pergunta, resposta):
    """Exibe resposta do agente fiscal com avatar."""
    col1, col2 = st.columns([1, 10])
    
    with col1:
        if os.path.exists("assets/avatar_agente.png"):
            st.image("assets/avatar_agente.png", width=50)
        else:
            st.markdown("üë®‚Äçüíº", unsafe_allow_html=True)
    
    with col2:
        st.markdown(
            f"""
            <div style='background-color: #0D1B2A; border: 2px solid #FFD700; 
                        padding: 10px; border-radius: 10px; box-shadow: 0 0 10px #FFD700;'>
                <strong style='color: #FFD700;'>Agente Fiscal:</strong><br>
                <span style='color: #FFF;'>{resposta}</span>
            </div>
            """,
            unsafe_allow_html=True
        )


# ‚ö†Ô∏è Pop-ups de alerta, erro e sucesso
def mostrar_alerta(mensagem):
    st.warning(f"‚ö†Ô∏è {mensagem}")


def mostrar_erro(mensagem):
    st.error(f"‚ùå {mensagem}")


def mostrar_sucesso(mensagem):
    st.success(f"‚úÖ {mensagem}")


# üìå Rodap√© institucional com texto completo e logo ampliado
def exibir_rodape():
    st.markdown("---")
    col1, col2 = st.columns([1, 5])
    
    with col1:
        if os.path.exists("assets/logo_alquimistas.jpg"):
            st.image("assets/logo_alquimistas.jpg", width=120)
        else:
            st.markdown("üî¨", unsafe_allow_html=True)
    
    with col2:
        st.markdown(
            """
            <div style='margin-top: 6px;'>
                <p style='color: #222; font-size: 16px; margin-bottom: 6px;'>
                    <strong>Projeto desenvolvido pelos Alquimistas Digitais, atrav√©s da I2a2 ‚Äî Instituto de Intelig√™ncia Artificial Aplicada</strong>
                </p>
                <p style='color: #222; font-size: 14px; margin-bottom: 4px;'>
                    Este agente fiscal aut√¥nomo √© fruto de uma iniciativa educacional que desafia alunos a criar solu√ß√µes inteligentes e inovadoras.
                </p>
                <p style='color: #FFD700; font-size: 14px; margin-bottom: 4px;'>
                    Vers√£o 2.0 ‚Äî Outubro de 2025
                </p>
                <p style='color: #222; font-size: 14px;'>
                    Feito com muito carinho, l√≥gica afiada e uma pitada de criatividade.  
                    <br>¬© Alquimistas Digitais. Todos os direitos reservados.
                </p>
            </div>
            """,
            unsafe_allow_html=True
        )


# üß© Monta o topo da interface
def montar_interface():
    """Inicializa todos os elementos visuais do topo da p√°gina."""
    aplicar_estilo()
    exibir_logo()
    boas_vindas()
    introducao_chatfiscal()


# üéØ Fun√ß√£o auxiliar para gerar e exibir dica inteligente
def gerar_e_exibir_dica_inteligente(df, contexto_empresa="", historico=None, com_animacao=True):
    """
    Gera e exibe a dica inteligente do Corujito.
    
    Args:
        df: DataFrame com os dados fiscais
        contexto_empresa: Informa√ß√µes da empresa (ex: "SP | Com√©rcio")
        historico: Hist√≥rico de perguntas/respostas
        com_animacao: Se True, usa anima√ß√£o de digita√ß√£o
    
    Returns:
        str: Texto da dica gerada
    """
    try:
        # Importa a fun√ß√£o inteligente
        from dicas_corujito import gerar_dica_corujito_inteligente
        
        # Gera a dica
        with st.spinner("ü¶â Corujito analisando seus dados..."):
            dica = gerar_dica_corujito_inteligente(
                df=df,
                contexto_empresa=contexto_empresa,
                historico=historico
            )
        
        # Exibe com ou sem anima√ß√£o
        if com_animacao and len(dica) < 1000:  # Anima√ß√£o apenas para textos menores
            exibir_dica_corujito(dica)
        else:
            exibir_dica_corujito_rapida(dica)
        
        return dica
        
    except ImportError:
        # Fallback para vers√£o b√°sica
        dica_basica = f"""
üìä **AN√ÅLISE R√ÅPIDA DOS DADOS**
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚úÖ Total de registros: {len(df)}
‚úÖ Total de campos: {len(df.columns)}
‚úÖ Campos vazios: {df.isnull().sum().sum()}

üí° **Pronto para an√°lise!** Fa√ßa sua primeira pergunta ao Corujito.
        """
        
        if com_animacao:
            exibir_dica_corujito(dica_basica)
        else:
            exibir_dica_corujito_rapida(dica_basica)
        
        return dica_basica
    
    except Exception as e:
        st.error(f"‚ùå Erro ao gerar dica: {str(e)}")
        return None

# Upload do arquivo fiscal
arquivo = st.file_uploader("Envie seu arquivo fiscal", type=["csv", "xml", "pdf"])

# Cria√ß√£o das abas
aba_dados, aba_historico, aba_auditoria, aba_visualizacoes, aba_painel = st.tabs([
    "Dados do Chat", "Hist√≥rico", "Auditoria", "Visualiza√ß√µes", "Painel"
])

# Conte√∫do da aba Painel
with aba_painel:
    st.subheader("üìä Painel Fiscal Inteligente")

    opcao = st.radio(
        "Escolha o que deseja visualizar:",
        [
            "Gr√°fico",
            "Tabela",
            "Resumo",
            "üìä M√©trica CFOP",
            "üìÅ M√©trica SPED",
            "üß† Insights Inteligentes",
            "üîß Sugest√µes de Corre√ß√£o",
            "üì• Exportar Alertas"
        ],
        key="visualizacao_1"
    )

    if arquivo:
        df = pd.read_csv(arquivo, sep=';')
        # ... restante do painel fiscal